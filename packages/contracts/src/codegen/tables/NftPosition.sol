// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("NftPosition")));
bytes32 constant NftPositionTableId = _tableId;

struct NftPositionData {
  uint32 x;
  uint32 y;
  uint256 landedDate;
}

library NftPosition {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "x";
    _fieldNames[1] = "y";
    _fieldNames[2] = "landedDate";
    return ("NftPosition", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get x */
  function getX(address tokenAddress, uint256 tokenId) internal view returns (uint32 x) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, address tokenAddress, uint256 tokenId) internal view returns (uint32 x) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set x */
  function setX(address tokenAddress, uint256 tokenId, uint32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, address tokenAddress, uint256 tokenId, uint32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Get y */
  function getY(address tokenAddress, uint256 tokenId) internal view returns (uint32 y) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, address tokenAddress, uint256 tokenId) internal view returns (uint32 y) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set y */
  function setY(address tokenAddress, uint256 tokenId, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, address tokenAddress, uint256 tokenId, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Get landedDate */
  function getLandedDate(address tokenAddress, uint256 tokenId) internal view returns (uint256 landedDate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get landedDate (using the specified store) */
  function getLandedDate(
    IStore _store,
    address tokenAddress,
    uint256 tokenId
  ) internal view returns (uint256 landedDate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set landedDate */
  function setLandedDate(address tokenAddress, uint256 tokenId, uint256 landedDate) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((landedDate)));
  }

  /** Set landedDate (using the specified store) */
  function setLandedDate(IStore _store, address tokenAddress, uint256 tokenId, uint256 landedDate) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((landedDate)));
  }

  /** Get the full data */
  function get(address tokenAddress, uint256 tokenId) internal view returns (NftPositionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    address tokenAddress,
    uint256 tokenId
  ) internal view returns (NftPositionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(address tokenAddress, uint256 tokenId, uint32 x, uint32 y, uint256 landedDate) internal {
    bytes memory _data = encode(x, y, landedDate);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, address tokenAddress, uint256 tokenId, uint32 x, uint32 y, uint256 landedDate) internal {
    bytes memory _data = encode(x, y, landedDate);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(address tokenAddress, uint256 tokenId, NftPositionData memory _table) internal {
    set(tokenAddress, tokenId, _table.x, _table.y, _table.landedDate);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address tokenAddress, uint256 tokenId, NftPositionData memory _table) internal {
    set(_store, tokenAddress, tokenId, _table.x, _table.y, _table.landedDate);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (NftPositionData memory _table) {
    _table.x = (uint32(Bytes.slice4(_blob, 0)));

    _table.y = (uint32(Bytes.slice4(_blob, 4)));

    _table.landedDate = (uint256(Bytes.slice32(_blob, 8)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint32 x, uint32 y, uint256 landedDate) internal view returns (bytes memory) {
    return abi.encodePacked(x, y, landedDate);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address tokenAddress, uint256 tokenId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));
  }

  /* Delete all data for given keys */
  function deleteRecord(address tokenAddress, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address tokenAddress, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160((tokenAddress))));
    _keyTuple[1] = bytes32(uint256((tokenId)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
